<?xml version="1.0" encoding="UTF-8"?>
<testExecutions version="1">
  <file path="/home/wind/Projects/tech-challenger/src/core/application/services/__tests__/paymentOrderService.test.ts">
    <testCase name="PaymentOrderService -&gt; Test getPaymentOrders should get all payment orders" duration="12"/>
    <testCase name="PaymentOrderService -&gt; Test getPaymentOrderById should get payment order by payment order ID" duration="4"/>
    <testCase name="PaymentOrderService -&gt; Test getPaymentOrderByOrderId should get payment order by order ID" duration="6"/>
    <testCase name="PaymentOrderService -&gt; Test makePayment should throw InvalidPaymentOrderException" duration="55"/>
    <testCase name="PaymentOrderService -&gt; Test makePayment should throw InvalidPaymentOrderException when payment order already exists" duration="8"/>
    <testCase name="PaymentOrderService -&gt; Test makePayment should create payment order" duration="11"/>
    <testCase name="PaymentOrderService -&gt; Test processPaymentNotification should throw PaymentNotificationException" duration="8"/>
    <testCase name="PaymentOrderService -&gt; Test processPaymentNotification should throw InvalidPaymentOrderException when payment order already exists" duration="3"/>
    <testCase name="PaymentOrderService -&gt; Test processPaymentNotification should proccess finished orders and throw PaymentNotificationException" duration="7"/>
    <testCase name="PaymentOrderService -&gt; Test processPaymentNotification should proccess finished orders" duration="9"/>
    <testCase name="PaymentOrderService -&gt; Test processPaymentNotification should proccess finished orders and throw PaymentNotificationException" duration="9"/>
    <testCase name="PaymentOrderService -&gt; Test processPaymentNotification should proccess finished orders when is the first order of the day" duration="14"/>
    <testCase name="PaymentOrderService -&gt; Test processPaymentNotification should proccess confirmation required order" duration="7"/>
    <testCase name="PaymentOrderService -&gt; Test processPaymentNotification should proccess cancelled orders and throw PaymentNotificationException when paymentOrder is not pending" duration="8"/>
    <testCase name="PaymentOrderService -&gt; Test processPaymentNotification should proccess cancelled orders and throw PaymentNotificationException" duration="4"/>
    <testCase name="PaymentOrderService -&gt; Test processPaymentNotification should proccess cancelled orders" duration="4"/>
  </file>
  <file path="/home/wind/Projects/tech-challenger/src/core/application/services/__tests__/orderService.test.ts">
    <testCase name="OrderService -&gt; Test getOrders should search orders by status" duration="11"/>
    <testCase name="OrderService -&gt; Test getOrders should throw InvalidOrderStatusException" duration="33"/>
    <testCase name="OrderService -&gt; Test getOrders should search all orders" duration="6"/>
    <testCase name="OrderService -&gt; Test getOrderById should throw InvalidOrderException" duration="22"/>
    <testCase name="OrderService -&gt; Test getOrderById should get order by ID" duration="9"/>
    <testCase name="OrderService -&gt; Test getOrderCreatedById should throw InvalidOrderException" duration="18"/>
    <testCase name="OrderService -&gt; Test getOrderCreatedById should get order created by ID" duration="11"/>
    <testCase name="OrderService -&gt; Test createOrder should create order with customer ID" duration="18"/>
    <testCase name="OrderService -&gt; Test createOrder should create order without customer ID" duration="8"/>
    <testCase name="OrderService -&gt; Test updateOrder should throw id related InvalidOrderException" duration="18"/>
    <testCase name="OrderService -&gt; Test updateOrder should throw status related InvalidOrderException" duration="10"/>
    <testCase name="OrderService -&gt; Test updateOrder should update order successfully" duration="19"/>
    <testCase name="OrderService -&gt; Test getOrderTotalValueById should throw id related InvalidOrderException" duration="13"/>
    <testCase name="OrderService -&gt; Test getOrderTotalValueById should throw status related InvalidOrderException" duration="7"/>
    <testCase name="OrderService -&gt; Test getOrderTotalValueById should update order successfully" duration="8"/>
  </file>
  <file path="/home/wind/Projects/tech-challenger/src/core/application/services/__tests__/productService.test.ts">
    <testCase name="ProductService -&gt; Test getProducts should get all products" duration="9"/>
    <testCase name="ProductService -&gt; Test getProducts should not get products by product category" duration="8"/>
    <testCase name="ProductService -&gt; Test getProducts should get products by product category" duration="4"/>
    <testCase name="ProductService -&gt; Test getProductById should get product by ID" duration="5"/>
    <testCase name="ProductService -&gt; Test deleteProducts should throw InvalidProductException" duration="70"/>
    <testCase name="ProductService -&gt; Test deleteProducts should throw InvalidProductException when product is not found" duration="8"/>
    <testCase name="ProductService -&gt; Test deleteProducts should delete product succesfully" duration="4"/>
    <testCase name="ProductService -&gt; Test createProducts should throw InvalidProductException" duration="14"/>
    <testCase name="ProductService -&gt; Test createProducts should create product without image" duration="4"/>
    <testCase name="ProductService -&gt; Test createProducts should create product with image" duration="6"/>
    <testCase name="ProductService -&gt; Test updateProducts should throw InvalidProductException" duration="13"/>
    <testCase name="ProductService -&gt; Test updateProducts should throw DataNotFoundException when product is not found" duration="9"/>
    <testCase name="ProductService -&gt; Test updateProducts should update product" duration="2"/>
    <testCase name="ProductService -&gt; Test updateProducts should update product with image" duration="15"/>
    <testCase name="ProductService -&gt; Test updateProducts should update product without image" duration="7"/>
  </file>
  <file path="/home/wind/Projects/tech-challenger/src/core/application/services/__tests__/cartService.test.ts">
    <testCase name="CartService -&gt; Test getAllCartItemsByOrderId should throw orderId related InvalidProductException" duration="23"/>
    <testCase name="CartService -&gt; Test getAllCartItemsByOrderId should test success path" duration="8"/>
    <testCase name="CartService -&gt; Test addItemToCart should throw generic InvalidProductException" duration="12"/>
    <testCase name="CartService -&gt; Test addItemToCart should throw quantity related InvalidProductException" duration="8"/>
    <testCase name="CartService -&gt; Test addItemToCart should test success path" duration="9"/>
    <testCase name="CartService -&gt; Test updateCartItem should throw generic InvalidProductException" duration="5"/>
    <testCase name="CartService -&gt; Test updateCartItem should throw quantity related InvalidProductException" duration="7"/>
    <testCase name="CartService -&gt; Test updateCartItem should test success path" duration="7"/>
    <testCase name="CartService -&gt; Test deleteCartItem should throw id related InvalidProductException" duration="4"/>
    <testCase name="CartService -&gt; Test deleteCartItem should test success path" duration="7"/>
  </file>
  <file path="/home/wind/Projects/tech-challenger/src/core/application/services/__tests__/productCategoryService.test.ts">
    <testCase name="ProductCategoryService -&gt; Test getProductCategories should get all product categories" duration="6"/>
    <testCase name="ProductCategoryService -&gt; Test getProductCategoryByName should get product categories by name" duration="3"/>
    <testCase name="ProductCategoryService -&gt; Test createProductCategory should create product category" duration="6"/>
    <testCase name="ProductCategoryService -&gt; Test updateProductCategory should throw InvalidProductCategoryException" duration="31"/>
    <testCase name="ProductCategoryService -&gt; Test updateProductCategory should update product category" duration="3"/>
    <testCase name="ProductCategoryService -&gt; Test deleteProductCategory should throw InvalidProductCategoryException" duration="6"/>
    <testCase name="ProductCategoryService -&gt; Test deleteProductCategory should not delete product category when it has at least one product associated to it" duration="2"/>
    <testCase name="ProductCategoryService -&gt; Test deleteProductCategory should delete product category" duration="3"/>
  </file>
  <file path="/home/wind/Projects/tech-challenger/src/core/application/services/__tests__/customerService.test.ts">
    <testCase name="CustomerService -&gt; Test getCustomers should return all customers" duration="8"/>
    <testCase name="CustomerService -&gt; Test getCustomerByProperty should return customers by ID" duration="4"/>
    <testCase name="CustomerService -&gt; Test getCustomerByProperty should return customers by document" duration="4"/>
    <testCase name="CustomerService -&gt; Test getCustomerByProperty should throw InvalidCustomerException" duration="34"/>
    <testCase name="CustomerService -&gt; Test createCustomer should throw InvalidCustomerException with customer already exists message" duration="7"/>
    <testCase name="CustomerService -&gt; Test createCustomer should create customer and return it" duration="7"/>
    <testCase name="CustomerService -&gt; Test deleteCustomer should throw InvalidCustomerException with customer not found" duration="4"/>
    <testCase name="CustomerService -&gt; Test deleteCustomer should delete customer" duration="2"/>
  </file>
  <file path="/home/wind/Projects/tech-challenger/src/core/application/services/__tests__/mercadoPagoService.test.ts">
    <testCase name="MercadoPagoService -&gt; Test createQrPaymentRequest should create QRCode and return QRCode data" duration="8"/>
    <testCase name="MercadoPagoService -&gt; Test createQrPaymentRequest should throw InvalidMercadoPagoException" duration="15"/>
    <testCase name="MercadoPagoService -&gt; Test createQrPaymentRequest should throw InvalidMercadoPagoException with default details" duration="7"/>
    <testCase name="MercadoPagoService -&gt; Test createQrPaymentRequest should throw InvalidMercadoPagoException with details" duration="5"/>
  </file>
  <file path="/home/wind/Projects/tech-challenger/src/core/application/services/__tests__/cacheService.test.ts">
    <testCase name="CacheService -&gt; Test get should not find cache" duration="7"/>
    <testCase name="CacheService -&gt; Test get should find cache" duration="3"/>
    <testCase name="CacheService -&gt; Test get should trigger logger error" duration="17"/>
    <testCase name="CacheService -&gt; Test set should set cache" duration="3"/>
    <testCase name="CacheService -&gt; Test set should trigger logger error" duration="4"/>
    <testCase name="CacheService -&gt; Test delete should delete cache" duration="2"/>
    <testCase name="CacheService -&gt; Test delete should trigger logger error" duration="3"/>
  </file>
  <file path="/home/wind/Projects/tech-challenger/src/core/application/services/__tests__/productImageService.test.ts">
    <testCase name="ProductImageService -&gt; Test getProductImageById should throw InvalidProductCategoryException" duration="14"/>
    <testCase name="ProductImageService -&gt; Test getProductImageById should get all product categories" duration="4"/>
  </file>
  <file path="/home/wind/Projects/tech-challenger/src/core/application/services/__tests__/userService.test.ts">
    <testCase name="UserService -&gt; Test getUsers should get all product categories" duration="6"/>
  </file>
</testExecutions>